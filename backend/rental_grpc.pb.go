// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: rental.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BikeService_CreateBike_FullMethodName = "/bikerental.BikeService/CreateBike"
	BikeService_GetBike_FullMethodName    = "/bikerental.BikeService/GetBike"
	BikeService_UpdateBike_FullMethodName = "/bikerental.BikeService/UpdateBike"
	BikeService_DeleteBike_FullMethodName = "/bikerental.BikeService/DeleteBike"
	BikeService_ListBikes_FullMethodName  = "/bikerental.BikeService/ListBikes"
)

// BikeServiceClient is the client API for BikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BikeServiceClient interface {
	// Create a new bike
	CreateBike(ctx context.Context, in *CreateBikeRequest, opts ...grpc.CallOption) (*Bike, error)
	// Get a bike by ID
	GetBike(ctx context.Context, in *GetBikeRequest, opts ...grpc.CallOption) (*Bike, error)
	// Update a bike
	UpdateBike(ctx context.Context, in *UpdateBikeRequest, opts ...grpc.CallOption) (*Bike, error)
	// Delete a bike
	DeleteBike(ctx context.Context, in *DeleteBikeRequest, opts ...grpc.CallOption) (*DeletedBikeResponse, error)
	// List bikes with pagination
	ListBikes(ctx context.Context, in *ListBikesRequest, opts ...grpc.CallOption) (*ListBikesResponse, error)
}

type bikeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBikeServiceClient(cc grpc.ClientConnInterface) BikeServiceClient {
	return &bikeServiceClient{cc}
}

func (c *bikeServiceClient) CreateBike(ctx context.Context, in *CreateBikeRequest, opts ...grpc.CallOption) (*Bike, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bike)
	err := c.cc.Invoke(ctx, BikeService_CreateBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBike(ctx context.Context, in *GetBikeRequest, opts ...grpc.CallOption) (*Bike, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bike)
	err := c.cc.Invoke(ctx, BikeService_GetBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) UpdateBike(ctx context.Context, in *UpdateBikeRequest, opts ...grpc.CallOption) (*Bike, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bike)
	err := c.cc.Invoke(ctx, BikeService_UpdateBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) DeleteBike(ctx context.Context, in *DeleteBikeRequest, opts ...grpc.CallOption) (*DeletedBikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedBikeResponse)
	err := c.cc.Invoke(ctx, BikeService_DeleteBike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) ListBikes(ctx context.Context, in *ListBikesRequest, opts ...grpc.CallOption) (*ListBikesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBikesResponse)
	err := c.cc.Invoke(ctx, BikeService_ListBikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BikeServiceServer is the server API for BikeService service.
// All implementations must embed UnimplementedBikeServiceServer
// for forward compatibility.
type BikeServiceServer interface {
	// Create a new bike
	CreateBike(context.Context, *CreateBikeRequest) (*Bike, error)
	// Get a bike by ID
	GetBike(context.Context, *GetBikeRequest) (*Bike, error)
	// Update a bike
	UpdateBike(context.Context, *UpdateBikeRequest) (*Bike, error)
	// Delete a bike
	DeleteBike(context.Context, *DeleteBikeRequest) (*DeletedBikeResponse, error)
	// List bikes with pagination
	ListBikes(context.Context, *ListBikesRequest) (*ListBikesResponse, error)
	mustEmbedUnimplementedBikeServiceServer()
}

// UnimplementedBikeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBikeServiceServer struct{}

func (UnimplementedBikeServiceServer) CreateBike(context.Context, *CreateBikeRequest) (*Bike, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBike not implemented")
}
func (UnimplementedBikeServiceServer) GetBike(context.Context, *GetBikeRequest) (*Bike, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBike not implemented")
}
func (UnimplementedBikeServiceServer) UpdateBike(context.Context, *UpdateBikeRequest) (*Bike, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBike not implemented")
}
func (UnimplementedBikeServiceServer) DeleteBike(context.Context, *DeleteBikeRequest) (*DeletedBikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBike not implemented")
}
func (UnimplementedBikeServiceServer) ListBikes(context.Context, *ListBikesRequest) (*ListBikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBikes not implemented")
}
func (UnimplementedBikeServiceServer) mustEmbedUnimplementedBikeServiceServer() {}
func (UnimplementedBikeServiceServer) testEmbeddedByValue()                     {}

// UnsafeBikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikeServiceServer will
// result in compilation errors.
type UnsafeBikeServiceServer interface {
	mustEmbedUnimplementedBikeServiceServer()
}

func RegisterBikeServiceServer(s grpc.ServiceRegistrar, srv BikeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBikeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BikeService_ServiceDesc, srv)
}

func _BikeService_CreateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).CreateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikeService_CreateBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).CreateBike(ctx, req.(*CreateBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikeService_GetBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBike(ctx, req.(*GetBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_UpdateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).UpdateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikeService_UpdateBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).UpdateBike(ctx, req.(*UpdateBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_DeleteBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).DeleteBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikeService_DeleteBike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).DeleteBike(ctx, req.(*DeleteBikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_ListBikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).ListBikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BikeService_ListBikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).ListBikes(ctx, req.(*ListBikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BikeService_ServiceDesc is the grpc.ServiceDesc for BikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bikerental.BikeService",
	HandlerType: (*BikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBike",
			Handler:    _BikeService_CreateBike_Handler,
		},
		{
			MethodName: "GetBike",
			Handler:    _BikeService_GetBike_Handler,
		},
		{
			MethodName: "UpdateBike",
			Handler:    _BikeService_UpdateBike_Handler,
		},
		{
			MethodName: "DeleteBike",
			Handler:    _BikeService_DeleteBike_Handler,
		},
		{
			MethodName: "ListBikes",
			Handler:    _BikeService_ListBikes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental.proto",
}

const (
	RentalService_CreateRental_FullMethodName = "/bikerental.RentalService/CreateRental"
	RentalService_GetRental_FullMethodName    = "/bikerental.RentalService/GetRental"
	RentalService_UpdateRental_FullMethodName = "/bikerental.RentalService/UpdateRental"
	RentalService_DeleteRental_FullMethodName = "/bikerental.RentalService/DeleteRental"
	RentalService_ListRentals_FullMethodName  = "/bikerental.RentalService/ListRentals"
)

// RentalServiceClient is the client API for RentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentalServiceClient interface {
	// Create a new rental
	CreateRental(ctx context.Context, in *CreateRentalRequest, opts ...grpc.CallOption) (*Rental, error)
	// Get a rental by ID
	GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*Rental, error)
	// Update a rental
	UpdateRental(ctx context.Context, in *UpdateRentalRequest, opts ...grpc.CallOption) (*Rental, error)
	// Delete a rental
	DeleteRental(ctx context.Context, in *DeleteRentalRequest, opts ...grpc.CallOption) (*DeletedRentalResponse, error)
	// List rentals with pagination
	ListRentals(ctx context.Context, in *ListRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error)
}

type rentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentalServiceClient(cc grpc.ClientConnInterface) RentalServiceClient {
	return &rentalServiceClient{cc}
}

func (c *rentalServiceClient) CreateRental(ctx context.Context, in *CreateRentalRequest, opts ...grpc.CallOption) (*Rental, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rental)
	err := c.cc.Invoke(ctx, RentalService_CreateRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*Rental, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rental)
	err := c.cc.Invoke(ctx, RentalService_GetRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) UpdateRental(ctx context.Context, in *UpdateRentalRequest, opts ...grpc.CallOption) (*Rental, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rental)
	err := c.cc.Invoke(ctx, RentalService_UpdateRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) DeleteRental(ctx context.Context, in *DeleteRentalRequest, opts ...grpc.CallOption) (*DeletedRentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletedRentalResponse)
	err := c.cc.Invoke(ctx, RentalService_DeleteRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) ListRentals(ctx context.Context, in *ListRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRentalsResponse)
	err := c.cc.Invoke(ctx, RentalService_ListRentals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentalServiceServer is the server API for RentalService service.
// All implementations must embed UnimplementedRentalServiceServer
// for forward compatibility.
type RentalServiceServer interface {
	// Create a new rental
	CreateRental(context.Context, *CreateRentalRequest) (*Rental, error)
	// Get a rental by ID
	GetRental(context.Context, *GetRentalRequest) (*Rental, error)
	// Update a rental
	UpdateRental(context.Context, *UpdateRentalRequest) (*Rental, error)
	// Delete a rental
	DeleteRental(context.Context, *DeleteRentalRequest) (*DeletedRentalResponse, error)
	// List rentals with pagination
	ListRentals(context.Context, *ListRentalsRequest) (*ListRentalsResponse, error)
	mustEmbedUnimplementedRentalServiceServer()
}

// UnimplementedRentalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRentalServiceServer struct{}

func (UnimplementedRentalServiceServer) CreateRental(context.Context, *CreateRentalRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRental not implemented")
}
func (UnimplementedRentalServiceServer) GetRental(context.Context, *GetRentalRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRental not implemented")
}
func (UnimplementedRentalServiceServer) UpdateRental(context.Context, *UpdateRentalRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRental not implemented")
}
func (UnimplementedRentalServiceServer) DeleteRental(context.Context, *DeleteRentalRequest) (*DeletedRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRental not implemented")
}
func (UnimplementedRentalServiceServer) ListRentals(context.Context, *ListRentalsRequest) (*ListRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRentals not implemented")
}
func (UnimplementedRentalServiceServer) mustEmbedUnimplementedRentalServiceServer() {}
func (UnimplementedRentalServiceServer) testEmbeddedByValue()                       {}

// UnsafeRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentalServiceServer will
// result in compilation errors.
type UnsafeRentalServiceServer interface {
	mustEmbedUnimplementedRentalServiceServer()
}

func RegisterRentalServiceServer(s grpc.ServiceRegistrar, srv RentalServiceServer) {
	// If the following call pancis, it indicates UnimplementedRentalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RentalService_ServiceDesc, srv)
}

func _RentalService_CreateRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).CreateRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_CreateRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).CreateRental(ctx, req.(*CreateRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_GetRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).GetRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_GetRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).GetRental(ctx, req.(*GetRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_UpdateRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).UpdateRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_UpdateRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).UpdateRental(ctx, req.(*UpdateRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_DeleteRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).DeleteRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_DeleteRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).DeleteRental(ctx, req.(*DeleteRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_ListRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).ListRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalService_ListRentals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).ListRentals(ctx, req.(*ListRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentalService_ServiceDesc is the grpc.ServiceDesc for RentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bikerental.RentalService",
	HandlerType: (*RentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRental",
			Handler:    _RentalService_CreateRental_Handler,
		},
		{
			MethodName: "GetRental",
			Handler:    _RentalService_GetRental_Handler,
		},
		{
			MethodName: "UpdateRental",
			Handler:    _RentalService_UpdateRental_Handler,
		},
		{
			MethodName: "DeleteRental",
			Handler:    _RentalService_DeleteRental_Handler,
		},
		{
			MethodName: "ListRentals",
			Handler:    _RentalService_ListRentals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental.proto",
}
