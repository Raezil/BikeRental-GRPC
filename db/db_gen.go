// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"sqlite","activeProvider":"sqlite","url":{"fromEnvVar":"","value":"file:dev.db"},"config":null}]`

const schema = `datasource db {
  provider = "sqlite" // or "postgresql", "mysql", etc.
  url      = "file:dev.db"
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  surname   String
  age       Int
  rentals   Rental[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bike {
  id        Int      @id @default(autoincrement())
  model     String
  status    String   @default("AVAILABLE")
  rentals   Rental[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rental {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  bikeId    Int
  bike      Bike      @relation(fields: [bikeId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  status    String    @default("ONGOING")
}
`
const schemaDatasourceURL = "file:dev.db"
const schemaEnvVarName = ""

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.Bike = bikeActions{client: c}
	c.Rental = rentalActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// Bike provides access to CRUD methods.
	Bike bikeActions
	// Rental provides access to CRUD methods.
	Rental rentalActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelSerializable TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID        UserScalarFieldEnum = "id"
	UserScalarFieldEnumEmail     UserScalarFieldEnum = "email"
	UserScalarFieldEnumName      UserScalarFieldEnum = "name"
	UserScalarFieldEnumPassword  UserScalarFieldEnum = "password"
	UserScalarFieldEnumSurname   UserScalarFieldEnum = "surname"
	UserScalarFieldEnumAge       UserScalarFieldEnum = "age"
	UserScalarFieldEnumCreatedAt UserScalarFieldEnum = "createdAt"
	UserScalarFieldEnumUpdatedAt UserScalarFieldEnum = "updatedAt"
)

type BikeScalarFieldEnum string

const (
	BikeScalarFieldEnumID        BikeScalarFieldEnum = "id"
	BikeScalarFieldEnumModel     BikeScalarFieldEnum = "model"
	BikeScalarFieldEnumStatus    BikeScalarFieldEnum = "status"
	BikeScalarFieldEnumCreatedAt BikeScalarFieldEnum = "createdAt"
	BikeScalarFieldEnumUpdatedAt BikeScalarFieldEnum = "updatedAt"
)

type RentalScalarFieldEnum string

const (
	RentalScalarFieldEnumID        RentalScalarFieldEnum = "id"
	RentalScalarFieldEnumUserID    RentalScalarFieldEnum = "userId"
	RentalScalarFieldEnumBikeID    RentalScalarFieldEnum = "bikeId"
	RentalScalarFieldEnumStartTime RentalScalarFieldEnum = "startTime"
	RentalScalarFieldEnumEndTime   RentalScalarFieldEnum = "endTime"
	RentalScalarFieldEnumStatus    RentalScalarFieldEnum = "status"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldEmail userPrismaFields = "email"

const userFieldName userPrismaFields = "name"

const userFieldPassword userPrismaFields = "password"

const userFieldSurname userPrismaFields = "surname"

const userFieldAge userPrismaFields = "age"

const userFieldRentals userPrismaFields = "rentals"

const userFieldCreatedAt userPrismaFields = "createdAt"

const userFieldUpdatedAt userPrismaFields = "updatedAt"

type bikePrismaFields = prismaFields

const bikeFieldID bikePrismaFields = "id"

const bikeFieldModel bikePrismaFields = "model"

const bikeFieldStatus bikePrismaFields = "status"

const bikeFieldRentals bikePrismaFields = "rentals"

const bikeFieldCreatedAt bikePrismaFields = "createdAt"

const bikeFieldUpdatedAt bikePrismaFields = "updatedAt"

type rentalPrismaFields = prismaFields

const rentalFieldID rentalPrismaFields = "id"

const rentalFieldUserID rentalPrismaFields = "userId"

const rentalFieldUser rentalPrismaFields = "user"

const rentalFieldBikeID rentalPrismaFields = "bikeId"

const rentalFieldBike rentalPrismaFields = "bike"

const rentalFieldStartTime rentalPrismaFields = "startTime"

const rentalFieldEndTime rentalPrismaFields = "endTime"

const rentalFieldStatus rentalPrismaFields = "status"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.Bike = bikeMock{
		mock: m,
	}

	m.Rental = rentalMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	Bike bikeMock

	Rental rentalMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type bikeMock struct {
	mock *Mock
}

type BikeMockExpectParam interface {
	ExtractQuery() builder.Query
	bikeModel()
}

func (m *bikeMock) Expect(query BikeMockExpectParam) *bikeMockExec {
	return &bikeMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type bikeMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *bikeMockExec) Returns(v BikeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *bikeMockExec) ReturnsMany(v []BikeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *bikeMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type rentalMock struct {
	mock *Mock
}

type RentalMockExpectParam interface {
	ExtractQuery() builder.Query
	rentalModel()
}

func (m *rentalMock) Expect(query RentalMockExpectParam) *rentalMockExec {
	return &rentalMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type rentalMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *rentalMockExec) Returns(v RentalModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *rentalMockExec) ReturnsMany(v []RentalModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *rentalMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID        int      `json:"id"`
	Email     string   `json:"email"`
	Name      *string  `json:"name,omitempty"`
	Password  string   `json:"password"`
	Surname   string   `json:"surname"`
	Age       int      `json:"age"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID        RawInt      `json:"id"`
	Email     RawString   `json:"email"`
	Name      *RawString  `json:"name,omitempty"`
	Password  RawString   `json:"password"`
	Surname   RawString   `json:"surname"`
	Age       RawInt      `json:"age"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Rentals []RentalModel `json:"rentals,omitempty"`
}

func (r UserModel) Name() (value String, ok bool) {
	if r.InnerUser.Name == nil {
		return value, false
	}
	return *r.InnerUser.Name, true
}

func (r UserModel) Rentals() (value []RentalModel) {
	if r.RelationsUser.Rentals == nil {
		panic("attempted to access rentals but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Rentals
}

// BikeModel represents the Bike model and is a wrapper for accessing fields and methods
type BikeModel struct {
	InnerBike
	RelationsBike
}

// InnerBike holds the actual data
type InnerBike struct {
	ID        int      `json:"id"`
	Model     string   `json:"model"`
	Status    string   `json:"status"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawBikeModel is a struct for Bike when used in raw queries
type RawBikeModel struct {
	ID        RawInt      `json:"id"`
	Model     RawString   `json:"model"`
	Status    RawString   `json:"status"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsBike holds the relation data separately
type RelationsBike struct {
	Rentals []RentalModel `json:"rentals,omitempty"`
}

func (r BikeModel) Rentals() (value []RentalModel) {
	if r.RelationsBike.Rentals == nil {
		panic("attempted to access rentals but did not fetch it using the .With() syntax")
	}
	return r.RelationsBike.Rentals
}

// RentalModel represents the Rental model and is a wrapper for accessing fields and methods
type RentalModel struct {
	InnerRental
	RelationsRental
}

// InnerRental holds the actual data
type InnerRental struct {
	ID        int       `json:"id"`
	UserID    int       `json:"userId"`
	BikeID    int       `json:"bikeId"`
	StartTime DateTime  `json:"startTime"`
	EndTime   *DateTime `json:"endTime,omitempty"`
	Status    string    `json:"status"`
}

// RawRentalModel is a struct for Rental when used in raw queries
type RawRentalModel struct {
	ID        RawInt       `json:"id"`
	UserID    RawInt       `json:"userId"`
	BikeID    RawInt       `json:"bikeId"`
	StartTime RawDateTime  `json:"startTime"`
	EndTime   *RawDateTime `json:"endTime,omitempty"`
	Status    RawString    `json:"status"`
}

// RelationsRental holds the relation data separately
type RelationsRental struct {
	User *UserModel `json:"user,omitempty"`
	Bike *BikeModel `json:"bike,omitempty"`
}

func (r RentalModel) User() (value *UserModel) {
	if r.RelationsRental.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsRental.User
}

func (r RentalModel) Bike() (value *BikeModel) {
	if r.RelationsRental.Bike == nil {
		panic("attempted to access bike but did not fetch it using the .With() syntax")
	}
	return r.RelationsRental.Bike
}

func (r RentalModel) EndTime() (value DateTime, ok bool) {
	if r.InnerRental.EndTime == nil {
		return value, false
	}
	return *r.InnerRental.EndTime, true
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDInt

	// Email
	//
	// @required
	// @unique
	Email userQueryEmailString

	// Name
	//
	// @optional
	Name userQueryNameString

	// Password
	//
	// @required
	Password userQueryPasswordString

	// Surname
	//
	// @required
	Surname userQuerySurnameString

	// Age
	//
	// @required
	Age userQueryAgeInt

	Rentals userQueryRentalsRelations

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDInt struct{}

// Set the required value of ID
func (r userQueryIDInt) Set(value int) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDInt) SetIfPresent(value *Int) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r userQueryIDInt) Increment(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) IncrementIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r userQueryIDInt) Decrement(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) DecrementIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r userQueryIDInt) Multiply(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) MultiplyIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r userQueryIDInt) Divide(value int) userSetParam {
	return userSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) DivideIfPresent(value *int) userSetParam {
	if value == nil {
		return userSetParam{}
	}
	return r.Divide(*value)
}

func (r userQueryIDInt) Equals(value int) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) EqualsIfPresent(value *int) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDInt) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDInt) Cursor(cursor int) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDInt) In(value []int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) InIfPresent(value []int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDInt) NotIn(value []int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) NotInIfPresent(value []int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDInt) Lt(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) LtIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDInt) Lte(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) LteIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDInt) Gt(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) GtIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDInt) Gte(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) GteIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDInt) Not(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDInt) NotIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryIDInt) LT(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryIDInt) LTIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r userQueryIDInt) LTE(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryIDInt) LTEIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r userQueryIDInt) GT(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryIDInt) GTIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r userQueryIDInt) GTE(value int) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryIDInt) GTEIfPresent(value *int) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.GTE(*value)
}

func (r userQueryIDInt) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryEmailString struct{}

// Set the required value of Email
func (r userQueryEmailString) Set(value string) userWithPrismaEmailSetParam {

	return userWithPrismaEmailSetParam{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetIfPresent(value *String) userWithPrismaEmailSetParam {
	if value == nil {
		return userWithPrismaEmailSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsUniqueParam {

	return userWithPrismaEmailEqualsUniqueParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EqualsIfPresent(value *string) userWithPrismaEmailEqualsUniqueParam {
	if value == nil {
		return userWithPrismaEmailEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryEmailString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryEmailString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryEmailString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryEmailString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryEmailString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryEmailString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryEmailString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryEmailString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryEmailString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryEmailString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryEmailString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryEmailString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryEmailString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryEmailString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryEmailString) Field() userPrismaFields {
	return userFieldEmail
}

// base struct
type userQueryNameString struct{}

// Set the optional value of Name
func (r userQueryNameString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r userQueryNameString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Name dynamically
func (r userQueryNameString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "name",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryNameString) Equals(value string) userWithPrismaNameEqualsParam {

	return userWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EqualsIfPresent(value *string) userWithPrismaNameEqualsParam {
	if value == nil {
		return userWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryNameString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryNameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r userQueryNameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r userQueryNameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryNameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryNameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryNameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryNameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryNameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryNameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryNameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryNameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryNameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryNameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryNameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryNameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryNameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryNameString) Field() userPrismaFields {
	return userFieldName
}

// base struct
type userQueryPasswordString struct{}

// Set the required value of Password
func (r userQueryPasswordString) Set(value string) userWithPrismaPasswordSetParam {

	return userWithPrismaPasswordSetParam{
		data: builder.Field{
			Name:  "password",
			Value: value,
		},
	}

}

// Set the optional value of Password dynamically
func (r userQueryPasswordString) SetIfPresent(value *String) userWithPrismaPasswordSetParam {
	if value == nil {
		return userWithPrismaPasswordSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryPasswordString) Equals(value string) userWithPrismaPasswordEqualsParam {

	return userWithPrismaPasswordEqualsParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EqualsIfPresent(value *string) userWithPrismaPasswordEqualsParam {
	if value == nil {
		return userWithPrismaPasswordEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryPasswordString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "password",
			Value: direction,
		},
	}
}

func (r userQueryPasswordString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "password",
			Value: cursor,
		},
	}
}

func (r userQueryPasswordString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryPasswordString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryPasswordString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryPasswordString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryPasswordString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryPasswordString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryPasswordString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryPasswordString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryPasswordString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryPasswordString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryPasswordString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryPasswordString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryPasswordString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryPasswordString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryPasswordString) Field() userPrismaFields {
	return userFieldPassword
}

// base struct
type userQuerySurnameString struct{}

// Set the required value of Surname
func (r userQuerySurnameString) Set(value string) userWithPrismaSurnameSetParam {

	return userWithPrismaSurnameSetParam{
		data: builder.Field{
			Name:  "surname",
			Value: value,
		},
	}

}

// Set the optional value of Surname dynamically
func (r userQuerySurnameString) SetIfPresent(value *String) userWithPrismaSurnameSetParam {
	if value == nil {
		return userWithPrismaSurnameSetParam{}
	}

	return r.Set(*value)
}

func (r userQuerySurnameString) Equals(value string) userWithPrismaSurnameEqualsParam {

	return userWithPrismaSurnameEqualsParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) EqualsIfPresent(value *string) userWithPrismaSurnameEqualsParam {
	if value == nil {
		return userWithPrismaSurnameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQuerySurnameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "surname",
			Value: direction,
		},
	}
}

func (r userQuerySurnameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "surname",
			Value: cursor,
		},
	}
}

func (r userQuerySurnameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQuerySurnameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQuerySurnameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQuerySurnameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQuerySurnameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQuerySurnameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQuerySurnameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQuerySurnameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQuerySurnameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQuerySurnameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQuerySurnameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQuerySurnameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQuerySurnameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQuerySurnameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "surname",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQuerySurnameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQuerySurnameString) Field() userPrismaFields {
	return userFieldSurname
}

// base struct
type userQueryAgeInt struct{}

// Set the required value of Age
func (r userQueryAgeInt) Set(value int) userWithPrismaAgeSetParam {

	return userWithPrismaAgeSetParam{
		data: builder.Field{
			Name:  "age",
			Value: value,
		},
	}

}

// Set the optional value of Age dynamically
func (r userQueryAgeInt) SetIfPresent(value *Int) userWithPrismaAgeSetParam {
	if value == nil {
		return userWithPrismaAgeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Age
func (r userQueryAgeInt) Increment(value int) userWithPrismaAgeSetParam {
	return userWithPrismaAgeSetParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) IncrementIfPresent(value *int) userWithPrismaAgeSetParam {
	if value == nil {
		return userWithPrismaAgeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Age
func (r userQueryAgeInt) Decrement(value int) userWithPrismaAgeSetParam {
	return userWithPrismaAgeSetParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) DecrementIfPresent(value *int) userWithPrismaAgeSetParam {
	if value == nil {
		return userWithPrismaAgeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Age
func (r userQueryAgeInt) Multiply(value int) userWithPrismaAgeSetParam {
	return userWithPrismaAgeSetParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) MultiplyIfPresent(value *int) userWithPrismaAgeSetParam {
	if value == nil {
		return userWithPrismaAgeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Age
func (r userQueryAgeInt) Divide(value int) userWithPrismaAgeSetParam {
	return userWithPrismaAgeSetParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) DivideIfPresent(value *int) userWithPrismaAgeSetParam {
	if value == nil {
		return userWithPrismaAgeSetParam{}
	}
	return r.Divide(*value)
}

func (r userQueryAgeInt) Equals(value int) userWithPrismaAgeEqualsParam {

	return userWithPrismaAgeEqualsParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) EqualsIfPresent(value *int) userWithPrismaAgeEqualsParam {
	if value == nil {
		return userWithPrismaAgeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryAgeInt) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "age",
			Value: direction,
		},
	}
}

func (r userQueryAgeInt) Cursor(cursor int) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "age",
			Value: cursor,
		},
	}
}

func (r userQueryAgeInt) In(value []int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) InIfPresent(value []int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryAgeInt) NotIn(value []int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) NotInIfPresent(value []int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryAgeInt) Lt(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) LtIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryAgeInt) Lte(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) LteIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryAgeInt) Gt(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) GtIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryAgeInt) Gte(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) GteIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryAgeInt) Not(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeInt) NotIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryAgeInt) LT(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryAgeInt) LTIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r userQueryAgeInt) LTE(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryAgeInt) LTEIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r userQueryAgeInt) GT(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryAgeInt) GTIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r userQueryAgeInt) GTE(value int) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryAgeInt) GTEIfPresent(value *int) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.GTE(*value)
}

func (r userQueryAgeInt) Field() userPrismaFields {
	return userFieldAge
}

// base struct
type userQueryRentalsRental struct{}

type userQueryRentalsRelations struct{}

// User -> Rentals
//
// @relation
// @required
func (userQueryRentalsRelations) Some(
	params ...RentalWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Rentals
//
// @relation
// @required
func (userQueryRentalsRelations) Every(
	params ...RentalWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Rentals
//
// @relation
// @required
func (userQueryRentalsRelations) None(
	params ...RentalWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryRentalsRelations) Fetch(

	params ...RentalWhereParam,

) userToRentalsFindMany {
	var v userToRentalsFindMany

	v.query.Operation = "query"
	v.query.Method = "rentals"
	v.query.Outputs = rentalOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryRentalsRelations) Link(
	params ...RentalWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryRentalsRelations) Unlink(
	params ...RentalWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryRentalsRental) Field() userPrismaFields {
	return userFieldRentals
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedAtDateTime) Field() userPrismaFields {
	return userFieldCreatedAt
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParam {

	return userWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryUpdatedAtDateTime) Field() userPrismaFields {
	return userFieldUpdatedAt
}

// Bike acts as a namespaces to access query methods for the Bike model
var Bike = bikeQuery{}

// bikeQuery exposes query functions for the bike model
type bikeQuery struct {

	// ID
	//
	// @required
	ID bikeQueryIDInt

	// Model
	//
	// @required
	Model bikeQueryModelString

	// Status
	//
	// @required
	Status bikeQueryStatusString

	Rentals bikeQueryRentalsRelations

	// CreatedAt
	//
	// @required
	CreatedAt bikeQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt bikeQueryUpdatedAtDateTime
}

func (bikeQuery) Not(params ...BikeWhereParam) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (bikeQuery) Or(params ...BikeWhereParam) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (bikeQuery) And(params ...BikeWhereParam) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type bikeQueryIDInt struct{}

// Set the required value of ID
func (r bikeQueryIDInt) Set(value int) bikeSetParam {

	return bikeSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r bikeQueryIDInt) SetIfPresent(value *Int) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r bikeQueryIDInt) Increment(value int) bikeSetParam {
	return bikeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) IncrementIfPresent(value *int) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r bikeQueryIDInt) Decrement(value int) bikeSetParam {
	return bikeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) DecrementIfPresent(value *int) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r bikeQueryIDInt) Multiply(value int) bikeSetParam {
	return bikeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) MultiplyIfPresent(value *int) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r bikeQueryIDInt) Divide(value int) bikeSetParam {
	return bikeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) DivideIfPresent(value *int) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}
	return r.Divide(*value)
}

func (r bikeQueryIDInt) Equals(value int) bikeWithPrismaIDEqualsUniqueParam {

	return bikeWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) EqualsIfPresent(value *int) bikeWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return bikeWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r bikeQueryIDInt) Order(direction SortOrder) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r bikeQueryIDInt) Cursor(cursor int) bikeCursorParam {
	return bikeCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r bikeQueryIDInt) In(value []int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) InIfPresent(value []int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.In(value)
}

func (r bikeQueryIDInt) NotIn(value []int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) NotInIfPresent(value []int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.NotIn(value)
}

func (r bikeQueryIDInt) Lt(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) LtIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.Lt(*value)
}

func (r bikeQueryIDInt) Lte(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) LteIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.Lte(*value)
}

func (r bikeQueryIDInt) Gt(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) GtIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.Gt(*value)
}

func (r bikeQueryIDInt) Gte(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) GteIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.Gte(*value)
}

func (r bikeQueryIDInt) Not(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryIDInt) NotIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r bikeQueryIDInt) LT(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r bikeQueryIDInt) LTIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r bikeQueryIDInt) LTE(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r bikeQueryIDInt) LTEIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r bikeQueryIDInt) GT(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r bikeQueryIDInt) GTIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r bikeQueryIDInt) GTE(value int) bikeParamUnique {
	return bikeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r bikeQueryIDInt) GTEIfPresent(value *int) bikeParamUnique {
	if value == nil {
		return bikeParamUnique{}
	}
	return r.GTE(*value)
}

func (r bikeQueryIDInt) Field() bikePrismaFields {
	return bikeFieldID
}

// base struct
type bikeQueryModelString struct{}

// Set the required value of Model
func (r bikeQueryModelString) Set(value string) bikeWithPrismaModelSetParam {

	return bikeWithPrismaModelSetParam{
		data: builder.Field{
			Name:  "model",
			Value: value,
		},
	}

}

// Set the optional value of Model dynamically
func (r bikeQueryModelString) SetIfPresent(value *String) bikeWithPrismaModelSetParam {
	if value == nil {
		return bikeWithPrismaModelSetParam{}
	}

	return r.Set(*value)
}

func (r bikeQueryModelString) Equals(value string) bikeWithPrismaModelEqualsParam {

	return bikeWithPrismaModelEqualsParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) EqualsIfPresent(value *string) bikeWithPrismaModelEqualsParam {
	if value == nil {
		return bikeWithPrismaModelEqualsParam{}
	}
	return r.Equals(*value)
}

func (r bikeQueryModelString) Order(direction SortOrder) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name:  "model",
			Value: direction,
		},
	}
}

func (r bikeQueryModelString) Cursor(cursor string) bikeCursorParam {
	return bikeCursorParam{
		data: builder.Field{
			Name:  "model",
			Value: cursor,
		},
	}
}

func (r bikeQueryModelString) In(value []string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) InIfPresent(value []string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.In(value)
}

func (r bikeQueryModelString) NotIn(value []string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) NotInIfPresent(value []string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r bikeQueryModelString) Lt(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) LtIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r bikeQueryModelString) Lte(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) LteIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r bikeQueryModelString) Gt(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) GtIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r bikeQueryModelString) Gte(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) GteIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r bikeQueryModelString) Contains(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) ContainsIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r bikeQueryModelString) StartsWith(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) StartsWithIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r bikeQueryModelString) EndsWith(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) EndsWithIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r bikeQueryModelString) Not(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryModelString) NotIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r bikeQueryModelString) HasPrefix(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r bikeQueryModelString) HasPrefixIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r bikeQueryModelString) HasSuffix(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "model",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r bikeQueryModelString) HasSuffixIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r bikeQueryModelString) Field() bikePrismaFields {
	return bikeFieldModel
}

// base struct
type bikeQueryStatusString struct{}

// Set the required value of Status
func (r bikeQueryStatusString) Set(value string) bikeSetParam {

	return bikeSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r bikeQueryStatusString) SetIfPresent(value *String) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}

	return r.Set(*value)
}

func (r bikeQueryStatusString) Equals(value string) bikeWithPrismaStatusEqualsParam {

	return bikeWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) EqualsIfPresent(value *string) bikeWithPrismaStatusEqualsParam {
	if value == nil {
		return bikeWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r bikeQueryStatusString) Order(direction SortOrder) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r bikeQueryStatusString) Cursor(cursor string) bikeCursorParam {
	return bikeCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r bikeQueryStatusString) In(value []string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) InIfPresent(value []string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.In(value)
}

func (r bikeQueryStatusString) NotIn(value []string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) NotInIfPresent(value []string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r bikeQueryStatusString) Lt(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) LtIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r bikeQueryStatusString) Lte(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) LteIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r bikeQueryStatusString) Gt(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) GtIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r bikeQueryStatusString) Gte(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) GteIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r bikeQueryStatusString) Contains(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) ContainsIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r bikeQueryStatusString) StartsWith(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) StartsWithIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r bikeQueryStatusString) EndsWith(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) EndsWithIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r bikeQueryStatusString) Not(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryStatusString) NotIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r bikeQueryStatusString) HasPrefix(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r bikeQueryStatusString) HasPrefixIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r bikeQueryStatusString) HasSuffix(value string) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r bikeQueryStatusString) HasSuffixIfPresent(value *string) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r bikeQueryStatusString) Field() bikePrismaFields {
	return bikeFieldStatus
}

// base struct
type bikeQueryRentalsRental struct{}

type bikeQueryRentalsRelations struct{}

// Bike -> Rentals
//
// @relation
// @required
func (bikeQueryRentalsRelations) Some(
	params ...RentalWhereParam,
) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Bike -> Rentals
//
// @relation
// @required
func (bikeQueryRentalsRelations) Every(
	params ...RentalWhereParam,
) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Bike -> Rentals
//
// @relation
// @required
func (bikeQueryRentalsRelations) None(
	params ...RentalWhereParam,
) bikeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeDefaultParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (bikeQueryRentalsRelations) Fetch(

	params ...RentalWhereParam,

) bikeToRentalsFindMany {
	var v bikeToRentalsFindMany

	v.query.Operation = "query"
	v.query.Method = "rentals"
	v.query.Outputs = rentalOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r bikeQueryRentalsRelations) Link(
	params ...RentalWhereParam,
) bikeSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return bikeSetParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r bikeQueryRentalsRelations) Unlink(
	params ...RentalWhereParam,
) bikeSetParam {
	var v bikeSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = bikeSetParam{
		data: builder.Field{
			Name: "rentals",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r bikeQueryRentalsRental) Field() bikePrismaFields {
	return bikeFieldRentals
}

// base struct
type bikeQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r bikeQueryCreatedAtDateTime) Set(value DateTime) bikeSetParam {

	return bikeSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r bikeQueryCreatedAtDateTime) SetIfPresent(value *DateTime) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}

	return r.Set(*value)
}

func (r bikeQueryCreatedAtDateTime) Equals(value DateTime) bikeWithPrismaCreatedAtEqualsParam {

	return bikeWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) bikeWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return bikeWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r bikeQueryCreatedAtDateTime) Order(direction SortOrder) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r bikeQueryCreatedAtDateTime) Cursor(cursor DateTime) bikeCursorParam {
	return bikeCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r bikeQueryCreatedAtDateTime) In(value []DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) InIfPresent(value []DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.In(value)
}

func (r bikeQueryCreatedAtDateTime) NotIn(value []DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r bikeQueryCreatedAtDateTime) Lt(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) LtIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r bikeQueryCreatedAtDateTime) Lte(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) LteIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r bikeQueryCreatedAtDateTime) Gt(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) GtIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r bikeQueryCreatedAtDateTime) Gte(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) GteIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r bikeQueryCreatedAtDateTime) Not(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryCreatedAtDateTime) NotIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r bikeQueryCreatedAtDateTime) Before(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r bikeQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r bikeQueryCreatedAtDateTime) After(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r bikeQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r bikeQueryCreatedAtDateTime) BeforeEquals(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r bikeQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r bikeQueryCreatedAtDateTime) AfterEquals(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r bikeQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r bikeQueryCreatedAtDateTime) Field() bikePrismaFields {
	return bikeFieldCreatedAt
}

// base struct
type bikeQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r bikeQueryUpdatedAtDateTime) Set(value DateTime) bikeSetParam {

	return bikeSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r bikeQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) bikeSetParam {
	if value == nil {
		return bikeSetParam{}
	}

	return r.Set(*value)
}

func (r bikeQueryUpdatedAtDateTime) Equals(value DateTime) bikeWithPrismaUpdatedAtEqualsParam {

	return bikeWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) bikeWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return bikeWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r bikeQueryUpdatedAtDateTime) Order(direction SortOrder) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) Cursor(cursor DateTime) bikeCursorParam {
	return bikeCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) In(value []DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) InIfPresent(value []DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.In(value)
}

func (r bikeQueryUpdatedAtDateTime) NotIn(value []DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r bikeQueryUpdatedAtDateTime) Lt(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r bikeQueryUpdatedAtDateTime) Lte(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r bikeQueryUpdatedAtDateTime) Gt(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r bikeQueryUpdatedAtDateTime) Gte(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r bikeQueryUpdatedAtDateTime) Not(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r bikeQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r bikeQueryUpdatedAtDateTime) Before(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r bikeQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r bikeQueryUpdatedAtDateTime) After(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r bikeQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r bikeQueryUpdatedAtDateTime) BeforeEquals(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r bikeQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r bikeQueryUpdatedAtDateTime) AfterEquals(value DateTime) bikeDefaultParam {
	return bikeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r bikeQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) bikeDefaultParam {
	if value == nil {
		return bikeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r bikeQueryUpdatedAtDateTime) Field() bikePrismaFields {
	return bikeFieldUpdatedAt
}

// Rental acts as a namespaces to access query methods for the Rental model
var Rental = rentalQuery{}

// rentalQuery exposes query functions for the rental model
type rentalQuery struct {

	// ID
	//
	// @required
	ID rentalQueryIDInt

	// UserID
	//
	// @required
	UserID rentalQueryUserIDInt

	User rentalQueryUserRelations

	// BikeID
	//
	// @required
	BikeID rentalQueryBikeIDInt

	Bike rentalQueryBikeRelations

	// StartTime
	//
	// @required
	StartTime rentalQueryStartTimeDateTime

	// EndTime
	//
	// @optional
	EndTime rentalQueryEndTimeDateTime

	// Status
	//
	// @required
	Status rentalQueryStatusString
}

func (rentalQuery) Not(params ...RentalWhereParam) rentalDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rentalDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (rentalQuery) Or(params ...RentalWhereParam) rentalDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rentalDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (rentalQuery) And(params ...RentalWhereParam) rentalDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rentalDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type rentalQueryIDInt struct{}

// Set the required value of ID
func (r rentalQueryIDInt) Set(value int) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r rentalQueryIDInt) SetIfPresent(value *Int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r rentalQueryIDInt) Increment(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) IncrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r rentalQueryIDInt) Decrement(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) DecrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r rentalQueryIDInt) Multiply(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) MultiplyIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r rentalQueryIDInt) Divide(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) DivideIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Divide(*value)
}

func (r rentalQueryIDInt) Equals(value int) rentalWithPrismaIDEqualsUniqueParam {

	return rentalWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) EqualsIfPresent(value *int) rentalWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return rentalWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryIDInt) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r rentalQueryIDInt) Cursor(cursor int) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r rentalQueryIDInt) In(value []int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) InIfPresent(value []int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.In(value)
}

func (r rentalQueryIDInt) NotIn(value []int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) NotInIfPresent(value []int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.NotIn(value)
}

func (r rentalQueryIDInt) Lt(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) LtIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.Lt(*value)
}

func (r rentalQueryIDInt) Lte(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) LteIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.Lte(*value)
}

func (r rentalQueryIDInt) Gt(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) GtIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.Gt(*value)
}

func (r rentalQueryIDInt) Gte(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) GteIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.Gte(*value)
}

func (r rentalQueryIDInt) Not(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryIDInt) NotIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rentalQueryIDInt) LT(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rentalQueryIDInt) LTIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r rentalQueryIDInt) LTE(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rentalQueryIDInt) LTEIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r rentalQueryIDInt) GT(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rentalQueryIDInt) GTIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r rentalQueryIDInt) GTE(value int) rentalParamUnique {
	return rentalParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rentalQueryIDInt) GTEIfPresent(value *int) rentalParamUnique {
	if value == nil {
		return rentalParamUnique{}
	}
	return r.GTE(*value)
}

func (r rentalQueryIDInt) Field() rentalPrismaFields {
	return rentalFieldID
}

// base struct
type rentalQueryUserIDInt struct{}

// Set the required value of UserID
func (r rentalQueryUserIDInt) Set(value int) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r rentalQueryUserIDInt) SetIfPresent(value *Int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of UserID
func (r rentalQueryUserIDInt) Increment(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) IncrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of UserID
func (r rentalQueryUserIDInt) Decrement(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) DecrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of UserID
func (r rentalQueryUserIDInt) Multiply(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) MultiplyIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of UserID
func (r rentalQueryUserIDInt) Divide(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) DivideIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Divide(*value)
}

func (r rentalQueryUserIDInt) Equals(value int) rentalWithPrismaUserIDEqualsParam {

	return rentalWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) EqualsIfPresent(value *int) rentalWithPrismaUserIDEqualsParam {
	if value == nil {
		return rentalWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryUserIDInt) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r rentalQueryUserIDInt) Cursor(cursor int) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r rentalQueryUserIDInt) In(value []int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) InIfPresent(value []int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.In(value)
}

func (r rentalQueryUserIDInt) NotIn(value []int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) NotInIfPresent(value []int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rentalQueryUserIDInt) Lt(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) LtIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rentalQueryUserIDInt) Lte(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) LteIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rentalQueryUserIDInt) Gt(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) GtIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rentalQueryUserIDInt) Gte(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) GteIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rentalQueryUserIDInt) Not(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryUserIDInt) NotIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rentalQueryUserIDInt) LT(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rentalQueryUserIDInt) LTIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r rentalQueryUserIDInt) LTE(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rentalQueryUserIDInt) LTEIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r rentalQueryUserIDInt) GT(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rentalQueryUserIDInt) GTIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r rentalQueryUserIDInt) GTE(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rentalQueryUserIDInt) GTEIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.GTE(*value)
}

func (r rentalQueryUserIDInt) Field() rentalPrismaFields {
	return rentalFieldUserID
}

// base struct
type rentalQueryUserUser struct{}

type rentalQueryUserRelations struct{}

// Rental -> User
//
// @relation
// @required
func (rentalQueryUserRelations) Where(
	params ...UserWhereParam,
) rentalDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rentalDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (rentalQueryUserRelations) Fetch() rentalToUserFindUnique {
	var v rentalToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r rentalQueryUserRelations) Link(
	params UserWhereParam,
) rentalWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return rentalWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return rentalWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r rentalQueryUserRelations) Unlink() rentalWithPrismaUserSetParam {
	var v rentalWithPrismaUserSetParam

	v = rentalWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r rentalQueryUserUser) Field() rentalPrismaFields {
	return rentalFieldUser
}

// base struct
type rentalQueryBikeIDInt struct{}

// Set the required value of BikeID
func (r rentalQueryBikeIDInt) Set(value int) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "bikeId",
			Value: value,
		},
	}

}

// Set the optional value of BikeID dynamically
func (r rentalQueryBikeIDInt) SetIfPresent(value *Int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of BikeID
func (r rentalQueryBikeIDInt) Increment(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) IncrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of BikeID
func (r rentalQueryBikeIDInt) Decrement(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) DecrementIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of BikeID
func (r rentalQueryBikeIDInt) Multiply(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) MultiplyIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of BikeID
func (r rentalQueryBikeIDInt) Divide(value int) rentalSetParam {
	return rentalSetParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) DivideIfPresent(value *int) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}
	return r.Divide(*value)
}

func (r rentalQueryBikeIDInt) Equals(value int) rentalWithPrismaBikeIDEqualsParam {

	return rentalWithPrismaBikeIDEqualsParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) EqualsIfPresent(value *int) rentalWithPrismaBikeIDEqualsParam {
	if value == nil {
		return rentalWithPrismaBikeIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryBikeIDInt) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "bikeId",
			Value: direction,
		},
	}
}

func (r rentalQueryBikeIDInt) Cursor(cursor int) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "bikeId",
			Value: cursor,
		},
	}
}

func (r rentalQueryBikeIDInt) In(value []int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) InIfPresent(value []int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.In(value)
}

func (r rentalQueryBikeIDInt) NotIn(value []int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) NotInIfPresent(value []int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rentalQueryBikeIDInt) Lt(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) LtIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rentalQueryBikeIDInt) Lte(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) LteIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rentalQueryBikeIDInt) Gt(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) GtIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rentalQueryBikeIDInt) Gte(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) GteIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rentalQueryBikeIDInt) Not(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryBikeIDInt) NotIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rentalQueryBikeIDInt) LT(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rentalQueryBikeIDInt) LTIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r rentalQueryBikeIDInt) LTE(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rentalQueryBikeIDInt) LTEIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r rentalQueryBikeIDInt) GT(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rentalQueryBikeIDInt) GTIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r rentalQueryBikeIDInt) GTE(value int) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "bikeId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rentalQueryBikeIDInt) GTEIfPresent(value *int) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.GTE(*value)
}

func (r rentalQueryBikeIDInt) Field() rentalPrismaFields {
	return rentalFieldBikeID
}

// base struct
type rentalQueryBikeBike struct{}

type rentalQueryBikeRelations struct{}

// Rental -> Bike
//
// @relation
// @required
func (rentalQueryBikeRelations) Where(
	params ...BikeWhereParam,
) rentalDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rentalDefaultParam{
		data: builder.Field{
			Name: "bike",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (rentalQueryBikeRelations) Fetch() rentalToBikeFindUnique {
	var v rentalToBikeFindUnique

	v.query.Operation = "query"
	v.query.Method = "bike"
	v.query.Outputs = bikeOutput

	return v
}

func (r rentalQueryBikeRelations) Link(
	params BikeWhereParam,
) rentalWithPrismaBikeSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return rentalWithPrismaBikeSetParam{}
	}

	fields = append(fields, f)

	return rentalWithPrismaBikeSetParam{
		data: builder.Field{
			Name: "bike",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r rentalQueryBikeRelations) Unlink() rentalWithPrismaBikeSetParam {
	var v rentalWithPrismaBikeSetParam

	v = rentalWithPrismaBikeSetParam{
		data: builder.Field{
			Name: "bike",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r rentalQueryBikeBike) Field() rentalPrismaFields {
	return rentalFieldBike
}

// base struct
type rentalQueryStartTimeDateTime struct{}

// Set the required value of StartTime
func (r rentalQueryStartTimeDateTime) Set(value DateTime) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}

}

// Set the optional value of StartTime dynamically
func (r rentalQueryStartTimeDateTime) SetIfPresent(value *DateTime) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

func (r rentalQueryStartTimeDateTime) Equals(value DateTime) rentalWithPrismaStartTimeEqualsParam {

	return rentalWithPrismaStartTimeEqualsParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) EqualsIfPresent(value *DateTime) rentalWithPrismaStartTimeEqualsParam {
	if value == nil {
		return rentalWithPrismaStartTimeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryStartTimeDateTime) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "startTime",
			Value: direction,
		},
	}
}

func (r rentalQueryStartTimeDateTime) Cursor(cursor DateTime) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "startTime",
			Value: cursor,
		},
	}
}

func (r rentalQueryStartTimeDateTime) In(value []DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) InIfPresent(value []DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.In(value)
}

func (r rentalQueryStartTimeDateTime) NotIn(value []DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) NotInIfPresent(value []DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rentalQueryStartTimeDateTime) Lt(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) LtIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rentalQueryStartTimeDateTime) Lte(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) LteIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rentalQueryStartTimeDateTime) Gt(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) GtIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rentalQueryStartTimeDateTime) Gte(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) GteIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rentalQueryStartTimeDateTime) Not(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStartTimeDateTime) NotIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rentalQueryStartTimeDateTime) Before(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rentalQueryStartTimeDateTime) BeforeIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r rentalQueryStartTimeDateTime) After(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rentalQueryStartTimeDateTime) AfterIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r rentalQueryStartTimeDateTime) BeforeEquals(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rentalQueryStartTimeDateTime) BeforeEqualsIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r rentalQueryStartTimeDateTime) AfterEquals(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rentalQueryStartTimeDateTime) AfterEqualsIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r rentalQueryStartTimeDateTime) Field() rentalPrismaFields {
	return rentalFieldStartTime
}

// base struct
type rentalQueryEndTimeDateTime struct{}

// Set the optional value of EndTime
func (r rentalQueryEndTimeDateTime) Set(value DateTime) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "endTime",
			Value: value,
		},
	}

}

// Set the optional value of EndTime dynamically
func (r rentalQueryEndTimeDateTime) SetIfPresent(value *DateTime) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of EndTime dynamically
func (r rentalQueryEndTimeDateTime) SetOptional(value *DateTime) rentalSetParam {
	if value == nil {

		var v *DateTime
		return rentalSetParam{
			data: builder.Field{
				Name:  "endTime",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r rentalQueryEndTimeDateTime) Equals(value DateTime) rentalWithPrismaEndTimeEqualsParam {

	return rentalWithPrismaEndTimeEqualsParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) EqualsIfPresent(value *DateTime) rentalWithPrismaEndTimeEqualsParam {
	if value == nil {
		return rentalWithPrismaEndTimeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryEndTimeDateTime) EqualsOptional(value *DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) IsNull() rentalDefaultParam {
	var str *string = nil
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "endTime",
			Value: direction,
		},
	}
}

func (r rentalQueryEndTimeDateTime) Cursor(cursor DateTime) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "endTime",
			Value: cursor,
		},
	}
}

func (r rentalQueryEndTimeDateTime) In(value []DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) InIfPresent(value []DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.In(value)
}

func (r rentalQueryEndTimeDateTime) NotIn(value []DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) NotInIfPresent(value []DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rentalQueryEndTimeDateTime) Lt(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) LtIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rentalQueryEndTimeDateTime) Lte(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) LteIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rentalQueryEndTimeDateTime) Gt(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) GtIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rentalQueryEndTimeDateTime) Gte(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) GteIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rentalQueryEndTimeDateTime) Not(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryEndTimeDateTime) NotIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rentalQueryEndTimeDateTime) Before(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rentalQueryEndTimeDateTime) BeforeIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r rentalQueryEndTimeDateTime) After(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rentalQueryEndTimeDateTime) AfterIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r rentalQueryEndTimeDateTime) BeforeEquals(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rentalQueryEndTimeDateTime) BeforeEqualsIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r rentalQueryEndTimeDateTime) AfterEquals(value DateTime) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "endTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rentalQueryEndTimeDateTime) AfterEqualsIfPresent(value *DateTime) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r rentalQueryEndTimeDateTime) Field() rentalPrismaFields {
	return rentalFieldEndTime
}

// base struct
type rentalQueryStatusString struct{}

// Set the required value of Status
func (r rentalQueryStatusString) Set(value string) rentalSetParam {

	return rentalSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r rentalQueryStatusString) SetIfPresent(value *String) rentalSetParam {
	if value == nil {
		return rentalSetParam{}
	}

	return r.Set(*value)
}

func (r rentalQueryStatusString) Equals(value string) rentalWithPrismaStatusEqualsParam {

	return rentalWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) EqualsIfPresent(value *string) rentalWithPrismaStatusEqualsParam {
	if value == nil {
		return rentalWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rentalQueryStatusString) Order(direction SortOrder) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r rentalQueryStatusString) Cursor(cursor string) rentalCursorParam {
	return rentalCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r rentalQueryStatusString) In(value []string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) InIfPresent(value []string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.In(value)
}

func (r rentalQueryStatusString) NotIn(value []string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) NotInIfPresent(value []string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rentalQueryStatusString) Lt(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) LtIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rentalQueryStatusString) Lte(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) LteIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rentalQueryStatusString) Gt(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) GtIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rentalQueryStatusString) Gte(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) GteIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rentalQueryStatusString) Contains(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) ContainsIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Contains(*value)
}

func (r rentalQueryStatusString) StartsWith(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) StartsWithIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r rentalQueryStatusString) EndsWith(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) EndsWithIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r rentalQueryStatusString) Not(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rentalQueryStatusString) NotIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r rentalQueryStatusString) HasPrefix(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r rentalQueryStatusString) HasPrefixIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r rentalQueryStatusString) HasSuffix(value string) rentalDefaultParam {
	return rentalDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r rentalQueryStatusString) HasSuffixIfPresent(value *string) rentalDefaultParam {
	if value == nil {
		return rentalDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r rentalQueryStatusString) Field() rentalPrismaFields {
	return rentalFieldStatus
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "email"},
	{Name: "name"},
	{Name: "password"},
	{Name: "surname"},
	{Name: "age"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaEmailEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type UserWithPrismaEmailSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParam) userModel() {}

func (p userWithPrismaEmailSetParam) emailField() {}

type UserWithPrismaEmailWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParam) userModel() {}

func (p userWithPrismaEmailEqualsParam) emailField() {}

func (userWithPrismaEmailSetParam) settable()  {}
func (userWithPrismaEmailEqualsParam) equals() {}

type userWithPrismaEmailEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsUniqueParam) userModel()  {}
func (p userWithPrismaEmailEqualsUniqueParam) emailField() {}

func (userWithPrismaEmailEqualsUniqueParam) unique() {}
func (userWithPrismaEmailEqualsUniqueParam) equals() {}

type UserWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	nameField()
}

type UserWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameSetParam) userModel() {}

func (p userWithPrismaNameSetParam) nameField() {}

type UserWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsParam) userModel() {}

func (p userWithPrismaNameEqualsParam) nameField() {}

func (userWithPrismaNameSetParam) settable()  {}
func (userWithPrismaNameEqualsParam) equals() {}

type userWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsUniqueParam) userModel() {}
func (p userWithPrismaNameEqualsUniqueParam) nameField() {}

func (userWithPrismaNameEqualsUniqueParam) unique() {}
func (userWithPrismaNameEqualsUniqueParam) equals() {}

type UserWithPrismaPasswordEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	passwordField()
}

type UserWithPrismaPasswordSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordSetParam) userModel() {}

func (p userWithPrismaPasswordSetParam) passwordField() {}

type UserWithPrismaPasswordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsParam) userModel() {}

func (p userWithPrismaPasswordEqualsParam) passwordField() {}

func (userWithPrismaPasswordSetParam) settable()  {}
func (userWithPrismaPasswordEqualsParam) equals() {}

type userWithPrismaPasswordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsUniqueParam) userModel()     {}
func (p userWithPrismaPasswordEqualsUniqueParam) passwordField() {}

func (userWithPrismaPasswordEqualsUniqueParam) unique() {}
func (userWithPrismaPasswordEqualsUniqueParam) equals() {}

type UserWithPrismaSurnameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	surnameField()
}

type UserWithPrismaSurnameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	surnameField()
}

type userWithPrismaSurnameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSurnameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSurnameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSurnameSetParam) userModel() {}

func (p userWithPrismaSurnameSetParam) surnameField() {}

type UserWithPrismaSurnameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	surnameField()
}

type userWithPrismaSurnameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSurnameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSurnameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSurnameEqualsParam) userModel() {}

func (p userWithPrismaSurnameEqualsParam) surnameField() {}

func (userWithPrismaSurnameSetParam) settable()  {}
func (userWithPrismaSurnameEqualsParam) equals() {}

type userWithPrismaSurnameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSurnameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSurnameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSurnameEqualsUniqueParam) userModel()    {}
func (p userWithPrismaSurnameEqualsUniqueParam) surnameField() {}

func (userWithPrismaSurnameEqualsUniqueParam) unique() {}
func (userWithPrismaSurnameEqualsUniqueParam) equals() {}

type UserWithPrismaAgeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	ageField()
}

type UserWithPrismaAgeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	ageField()
}

type userWithPrismaAgeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeSetParam) userModel() {}

func (p userWithPrismaAgeSetParam) ageField() {}

type UserWithPrismaAgeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	ageField()
}

type userWithPrismaAgeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeEqualsParam) userModel() {}

func (p userWithPrismaAgeEqualsParam) ageField() {}

func (userWithPrismaAgeSetParam) settable()  {}
func (userWithPrismaAgeEqualsParam) equals() {}

type userWithPrismaAgeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeEqualsUniqueParam) userModel() {}
func (p userWithPrismaAgeEqualsUniqueParam) ageField()  {}

func (userWithPrismaAgeEqualsUniqueParam) unique() {}
func (userWithPrismaAgeEqualsUniqueParam) equals() {}

type UserWithPrismaRentalsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	rentalsField()
}

type UserWithPrismaRentalsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	rentalsField()
}

type userWithPrismaRentalsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRentalsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRentalsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRentalsSetParam) userModel() {}

func (p userWithPrismaRentalsSetParam) rentalsField() {}

type UserWithPrismaRentalsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	rentalsField()
}

type userWithPrismaRentalsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRentalsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRentalsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRentalsEqualsParam) userModel() {}

func (p userWithPrismaRentalsEqualsParam) rentalsField() {}

func (userWithPrismaRentalsSetParam) settable()  {}
func (userWithPrismaRentalsEqualsParam) equals() {}

type userWithPrismaRentalsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRentalsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRentalsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRentalsEqualsUniqueParam) userModel()    {}
func (p userWithPrismaRentalsEqualsUniqueParam) rentalsField() {}

func (userWithPrismaRentalsEqualsUniqueParam) unique() {}
func (userWithPrismaRentalsEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type UserWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParam) userModel() {}

func (p userWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParam) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParam) settable()  {}
func (userWithPrismaUpdatedAtEqualsParam) equals() {}

type userWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type bikeActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var bikeOutput = []builder.Output{
	{Name: "id"},
	{Name: "model"},
	{Name: "status"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type BikeRelationWith interface {
	getQuery() builder.Query
	with()
	bikeRelation()
}

type BikeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
}

type bikeDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeDefaultParam) field() builder.Field {
	return p.data
}

func (p bikeDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p bikeDefaultParam) bikeModel() {}

type BikeOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
}

type bikeOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeOrderByParam) field() builder.Field {
	return p.data
}

func (p bikeOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p bikeOrderByParam) bikeModel() {}

type BikeCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	isCursor()
}

type bikeCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeCursorParam) field() builder.Field {
	return p.data
}

func (p bikeCursorParam) isCursor() {}

func (p bikeCursorParam) getQuery() builder.Query {
	return p.query
}

func (p bikeCursorParam) bikeModel() {}

type BikeParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	bikeModel()
}

type bikeParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p bikeParamUnique) bikeModel() {}

func (bikeParamUnique) unique() {}

func (p bikeParamUnique) field() builder.Field {
	return p.data
}

func (p bikeParamUnique) getQuery() builder.Query {
	return p.query
}

type BikeEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
}

type bikeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeEqualsParam) bikeModel() {}

func (bikeEqualsParam) equals() {}

func (p bikeEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeEqualsParam) getQuery() builder.Query {
	return p.query
}

type BikeEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	bikeModel()
}

type bikeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeEqualsUniqueParam) bikeModel() {}

func (bikeEqualsUniqueParam) unique() {}
func (bikeEqualsUniqueParam) equals() {}

func (p bikeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type BikeSetParam interface {
	field() builder.Field
	settable()
	bikeModel()
}

type bikeSetParam struct {
	data builder.Field
}

func (bikeSetParam) settable() {}

func (p bikeSetParam) field() builder.Field {
	return p.data
}

func (p bikeSetParam) bikeModel() {}

type BikeWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	idField()
}

type BikeWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	idField()
}

type bikeWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaIDSetParam) bikeModel() {}

func (p bikeWithPrismaIDSetParam) idField() {}

type BikeWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	idField()
}

type bikeWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaIDEqualsParam) bikeModel() {}

func (p bikeWithPrismaIDEqualsParam) idField() {}

func (bikeWithPrismaIDSetParam) settable()  {}
func (bikeWithPrismaIDEqualsParam) equals() {}

type bikeWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaIDEqualsUniqueParam) bikeModel() {}
func (p bikeWithPrismaIDEqualsUniqueParam) idField()   {}

func (bikeWithPrismaIDEqualsUniqueParam) unique() {}
func (bikeWithPrismaIDEqualsUniqueParam) equals() {}

type BikeWithPrismaModelEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	modelField()
}

type BikeWithPrismaModelSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	modelField()
}

type bikeWithPrismaModelSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaModelSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaModelSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaModelSetParam) bikeModel() {}

func (p bikeWithPrismaModelSetParam) modelField() {}

type BikeWithPrismaModelWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	modelField()
}

type bikeWithPrismaModelEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaModelEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaModelEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaModelEqualsParam) bikeModel() {}

func (p bikeWithPrismaModelEqualsParam) modelField() {}

func (bikeWithPrismaModelSetParam) settable()  {}
func (bikeWithPrismaModelEqualsParam) equals() {}

type bikeWithPrismaModelEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaModelEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaModelEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaModelEqualsUniqueParam) bikeModel()  {}
func (p bikeWithPrismaModelEqualsUniqueParam) modelField() {}

func (bikeWithPrismaModelEqualsUniqueParam) unique() {}
func (bikeWithPrismaModelEqualsUniqueParam) equals() {}

type BikeWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	statusField()
}

type BikeWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	statusField()
}

type bikeWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaStatusSetParam) bikeModel() {}

func (p bikeWithPrismaStatusSetParam) statusField() {}

type BikeWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	statusField()
}

type bikeWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaStatusEqualsParam) bikeModel() {}

func (p bikeWithPrismaStatusEqualsParam) statusField() {}

func (bikeWithPrismaStatusSetParam) settable()  {}
func (bikeWithPrismaStatusEqualsParam) equals() {}

type bikeWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaStatusEqualsUniqueParam) bikeModel()   {}
func (p bikeWithPrismaStatusEqualsUniqueParam) statusField() {}

func (bikeWithPrismaStatusEqualsUniqueParam) unique() {}
func (bikeWithPrismaStatusEqualsUniqueParam) equals() {}

type BikeWithPrismaRentalsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	rentalsField()
}

type BikeWithPrismaRentalsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	rentalsField()
}

type bikeWithPrismaRentalsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaRentalsSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaRentalsSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaRentalsSetParam) bikeModel() {}

func (p bikeWithPrismaRentalsSetParam) rentalsField() {}

type BikeWithPrismaRentalsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	rentalsField()
}

type bikeWithPrismaRentalsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaRentalsEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaRentalsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaRentalsEqualsParam) bikeModel() {}

func (p bikeWithPrismaRentalsEqualsParam) rentalsField() {}

func (bikeWithPrismaRentalsSetParam) settable()  {}
func (bikeWithPrismaRentalsEqualsParam) equals() {}

type bikeWithPrismaRentalsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaRentalsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaRentalsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaRentalsEqualsUniqueParam) bikeModel()    {}
func (p bikeWithPrismaRentalsEqualsUniqueParam) rentalsField() {}

func (bikeWithPrismaRentalsEqualsUniqueParam) unique() {}
func (bikeWithPrismaRentalsEqualsUniqueParam) equals() {}

type BikeWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	createdAtField()
}

type BikeWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	createdAtField()
}

type bikeWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaCreatedAtSetParam) bikeModel() {}

func (p bikeWithPrismaCreatedAtSetParam) createdAtField() {}

type BikeWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	createdAtField()
}

type bikeWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaCreatedAtEqualsParam) bikeModel() {}

func (p bikeWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (bikeWithPrismaCreatedAtSetParam) settable()  {}
func (bikeWithPrismaCreatedAtEqualsParam) equals() {}

type bikeWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaCreatedAtEqualsUniqueParam) bikeModel()      {}
func (p bikeWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (bikeWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (bikeWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type BikeWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	bikeModel()
	updatedAtField()
}

type BikeWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	updatedAtField()
}

type bikeWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaUpdatedAtSetParam) bikeModel() {}

func (p bikeWithPrismaUpdatedAtSetParam) updatedAtField() {}

type BikeWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	bikeModel()
	updatedAtField()
}

type bikeWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaUpdatedAtEqualsParam) bikeModel() {}

func (p bikeWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (bikeWithPrismaUpdatedAtSetParam) settable()  {}
func (bikeWithPrismaUpdatedAtEqualsParam) equals() {}

type bikeWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p bikeWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p bikeWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p bikeWithPrismaUpdatedAtEqualsUniqueParam) bikeModel()      {}
func (p bikeWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (bikeWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (bikeWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type rentalActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var rentalOutput = []builder.Output{
	{Name: "id"},
	{Name: "userId"},
	{Name: "bikeId"},
	{Name: "startTime"},
	{Name: "endTime"},
	{Name: "status"},
}

type RentalRelationWith interface {
	getQuery() builder.Query
	with()
	rentalRelation()
}

type RentalWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
}

type rentalDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalDefaultParam) field() builder.Field {
	return p.data
}

func (p rentalDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p rentalDefaultParam) rentalModel() {}

type RentalOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
}

type rentalOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalOrderByParam) field() builder.Field {
	return p.data
}

func (p rentalOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p rentalOrderByParam) rentalModel() {}

type RentalCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	isCursor()
}

type rentalCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalCursorParam) field() builder.Field {
	return p.data
}

func (p rentalCursorParam) isCursor() {}

func (p rentalCursorParam) getQuery() builder.Query {
	return p.query
}

func (p rentalCursorParam) rentalModel() {}

type RentalParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	rentalModel()
}

type rentalParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p rentalParamUnique) rentalModel() {}

func (rentalParamUnique) unique() {}

func (p rentalParamUnique) field() builder.Field {
	return p.data
}

func (p rentalParamUnique) getQuery() builder.Query {
	return p.query
}

type RentalEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
}

type rentalEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalEqualsParam) rentalModel() {}

func (rentalEqualsParam) equals() {}

func (p rentalEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalEqualsParam) getQuery() builder.Query {
	return p.query
}

type RentalEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	rentalModel()
}

type rentalEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalEqualsUniqueParam) rentalModel() {}

func (rentalEqualsUniqueParam) unique() {}
func (rentalEqualsUniqueParam) equals() {}

func (p rentalEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RentalSetParam interface {
	field() builder.Field
	settable()
	rentalModel()
}

type rentalSetParam struct {
	data builder.Field
}

func (rentalSetParam) settable() {}

func (p rentalSetParam) field() builder.Field {
	return p.data
}

func (p rentalSetParam) rentalModel() {}

type RentalWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	idField()
}

type RentalWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	idField()
}

type rentalWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaIDSetParam) rentalModel() {}

func (p rentalWithPrismaIDSetParam) idField() {}

type RentalWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	idField()
}

type rentalWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaIDEqualsParam) rentalModel() {}

func (p rentalWithPrismaIDEqualsParam) idField() {}

func (rentalWithPrismaIDSetParam) settable()  {}
func (rentalWithPrismaIDEqualsParam) equals() {}

type rentalWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaIDEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaIDEqualsUniqueParam) idField()     {}

func (rentalWithPrismaIDEqualsUniqueParam) unique() {}
func (rentalWithPrismaIDEqualsUniqueParam) equals() {}

type RentalWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	userIDField()
}

type RentalWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	userIDField()
}

type rentalWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserIDSetParam) rentalModel() {}

func (p rentalWithPrismaUserIDSetParam) userIDField() {}

type RentalWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	userIDField()
}

type rentalWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserIDEqualsParam) rentalModel() {}

func (p rentalWithPrismaUserIDEqualsParam) userIDField() {}

func (rentalWithPrismaUserIDSetParam) settable()  {}
func (rentalWithPrismaUserIDEqualsParam) equals() {}

type rentalWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserIDEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaUserIDEqualsUniqueParam) userIDField() {}

func (rentalWithPrismaUserIDEqualsUniqueParam) unique() {}
func (rentalWithPrismaUserIDEqualsUniqueParam) equals() {}

type RentalWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	userField()
}

type RentalWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	userField()
}

type rentalWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserSetParam) rentalModel() {}

func (p rentalWithPrismaUserSetParam) userField() {}

type RentalWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	userField()
}

type rentalWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserEqualsParam) rentalModel() {}

func (p rentalWithPrismaUserEqualsParam) userField() {}

func (rentalWithPrismaUserSetParam) settable()  {}
func (rentalWithPrismaUserEqualsParam) equals() {}

type rentalWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaUserEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaUserEqualsUniqueParam) userField()   {}

func (rentalWithPrismaUserEqualsUniqueParam) unique() {}
func (rentalWithPrismaUserEqualsUniqueParam) equals() {}

type RentalWithPrismaBikeIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	bikeIDField()
}

type RentalWithPrismaBikeIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	bikeIDField()
}

type rentalWithPrismaBikeIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeIDSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeIDSetParam) rentalModel() {}

func (p rentalWithPrismaBikeIDSetParam) bikeIDField() {}

type RentalWithPrismaBikeIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	bikeIDField()
}

type rentalWithPrismaBikeIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeIDEqualsParam) rentalModel() {}

func (p rentalWithPrismaBikeIDEqualsParam) bikeIDField() {}

func (rentalWithPrismaBikeIDSetParam) settable()  {}
func (rentalWithPrismaBikeIDEqualsParam) equals() {}

type rentalWithPrismaBikeIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeIDEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaBikeIDEqualsUniqueParam) bikeIDField() {}

func (rentalWithPrismaBikeIDEqualsUniqueParam) unique() {}
func (rentalWithPrismaBikeIDEqualsUniqueParam) equals() {}

type RentalWithPrismaBikeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	bikeField()
}

type RentalWithPrismaBikeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	bikeField()
}

type rentalWithPrismaBikeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeSetParam) rentalModel() {}

func (p rentalWithPrismaBikeSetParam) bikeField() {}

type RentalWithPrismaBikeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	bikeField()
}

type rentalWithPrismaBikeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeEqualsParam) rentalModel() {}

func (p rentalWithPrismaBikeEqualsParam) bikeField() {}

func (rentalWithPrismaBikeSetParam) settable()  {}
func (rentalWithPrismaBikeEqualsParam) equals() {}

type rentalWithPrismaBikeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaBikeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaBikeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaBikeEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaBikeEqualsUniqueParam) bikeField()   {}

func (rentalWithPrismaBikeEqualsUniqueParam) unique() {}
func (rentalWithPrismaBikeEqualsUniqueParam) equals() {}

type RentalWithPrismaStartTimeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	startTimeField()
}

type RentalWithPrismaStartTimeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	startTimeField()
}

type rentalWithPrismaStartTimeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStartTimeSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStartTimeSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStartTimeSetParam) rentalModel() {}

func (p rentalWithPrismaStartTimeSetParam) startTimeField() {}

type RentalWithPrismaStartTimeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	startTimeField()
}

type rentalWithPrismaStartTimeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStartTimeEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStartTimeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStartTimeEqualsParam) rentalModel() {}

func (p rentalWithPrismaStartTimeEqualsParam) startTimeField() {}

func (rentalWithPrismaStartTimeSetParam) settable()  {}
func (rentalWithPrismaStartTimeEqualsParam) equals() {}

type rentalWithPrismaStartTimeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStartTimeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStartTimeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStartTimeEqualsUniqueParam) rentalModel()    {}
func (p rentalWithPrismaStartTimeEqualsUniqueParam) startTimeField() {}

func (rentalWithPrismaStartTimeEqualsUniqueParam) unique() {}
func (rentalWithPrismaStartTimeEqualsUniqueParam) equals() {}

type RentalWithPrismaEndTimeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	endTimeField()
}

type RentalWithPrismaEndTimeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	endTimeField()
}

type rentalWithPrismaEndTimeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaEndTimeSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaEndTimeSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaEndTimeSetParam) rentalModel() {}

func (p rentalWithPrismaEndTimeSetParam) endTimeField() {}

type RentalWithPrismaEndTimeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	endTimeField()
}

type rentalWithPrismaEndTimeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaEndTimeEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaEndTimeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaEndTimeEqualsParam) rentalModel() {}

func (p rentalWithPrismaEndTimeEqualsParam) endTimeField() {}

func (rentalWithPrismaEndTimeSetParam) settable()  {}
func (rentalWithPrismaEndTimeEqualsParam) equals() {}

type rentalWithPrismaEndTimeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaEndTimeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaEndTimeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaEndTimeEqualsUniqueParam) rentalModel()  {}
func (p rentalWithPrismaEndTimeEqualsUniqueParam) endTimeField() {}

func (rentalWithPrismaEndTimeEqualsUniqueParam) unique() {}
func (rentalWithPrismaEndTimeEqualsUniqueParam) equals() {}

type RentalWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rentalModel()
	statusField()
}

type RentalWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	statusField()
}

type rentalWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStatusSetParam) rentalModel() {}

func (p rentalWithPrismaStatusSetParam) statusField() {}

type RentalWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rentalModel()
	statusField()
}

type rentalWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStatusEqualsParam) rentalModel() {}

func (p rentalWithPrismaStatusEqualsParam) statusField() {}

func (rentalWithPrismaStatusSetParam) settable()  {}
func (rentalWithPrismaStatusEqualsParam) equals() {}

type rentalWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rentalWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rentalWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rentalWithPrismaStatusEqualsUniqueParam) rentalModel() {}
func (p rentalWithPrismaStatusEqualsUniqueParam) statusField() {}

func (rentalWithPrismaStatusEqualsUniqueParam) unique() {}
func (rentalWithPrismaStatusEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,
	_surname UserWithPrismaSurnameSetParam,
	_age UserWithPrismaAgeSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _surname.field())
	fields = append(fields, _age.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single bike.
func (r bikeActions) CreateOne(
	_model BikeWithPrismaModelSetParam,

	optional ...BikeSetParam,
) bikeCreateOne {
	var v bikeCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Bike"
	v.query.Outputs = bikeOutput

	var fields []builder.Field

	fields = append(fields, _model.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r bikeCreateOne) With(params ...BikeRelationWith) bikeCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type bikeCreateOne struct {
	query builder.Query
}

func (p bikeCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p bikeCreateOne) bikeModel() {}

func (r bikeCreateOne) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeCreateOne) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single rental.
func (r rentalActions) CreateOne(
	_user RentalWithPrismaUserSetParam,
	_bike RentalWithPrismaBikeSetParam,

	optional ...RentalSetParam,
) rentalCreateOne {
	var v rentalCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Rental"
	v.query.Outputs = rentalOutput

	var fields []builder.Field

	fields = append(fields, _user.field())
	fields = append(fields, _bike.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r rentalCreateOne) With(params ...RentalRelationWith) rentalCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type rentalCreateOne struct {
	query builder.Query
}

func (p rentalCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p rentalCreateOne) rentalModel() {}

func (r rentalCreateOne) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalCreateOne) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToRentalsFindUnique struct {
	query builder.Query
}

func (r userToRentalsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindUnique) with()         {}
func (r userToRentalsFindUnique) userModel()    {}
func (r userToRentalsFindUnique) userRelation() {}

func (r userToRentalsFindUnique) With(params ...RentalRelationWith) userToRentalsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRentalsFindUnique) Select(params ...userPrismaFields) userToRentalsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindUnique) Omit(params ...userPrismaFields) userToRentalsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRentalsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRentalsFindUnique) Update(params ...UserSetParam) userToRentalsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToRentalsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRentalsUpdateUnique struct {
	query builder.Query
}

func (r userToRentalsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRentalsUpdateUnique) userModel() {}

func (r userToRentalsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRentalsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRentalsFindUnique) Delete() userToRentalsDeleteUnique {
	var v userToRentalsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToRentalsDeleteUnique struct {
	query builder.Query
}

func (r userToRentalsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRentalsDeleteUnique) userModel() {}

func (r userToRentalsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRentalsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToRentalsFindFirst struct {
	query builder.Query
}

func (r userToRentalsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindFirst) with()         {}
func (r userToRentalsFindFirst) userModel()    {}
func (r userToRentalsFindFirst) userRelation() {}

func (r userToRentalsFindFirst) With(params ...RentalRelationWith) userToRentalsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRentalsFindFirst) Select(params ...userPrismaFields) userToRentalsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindFirst) Omit(params ...userPrismaFields) userToRentalsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindFirst) OrderBy(params ...RentalOrderByParam) userToRentalsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRentalsFindFirst) Skip(count int) userToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRentalsFindFirst) Take(count int) userToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRentalsFindFirst) Cursor(cursor UserCursorParam) userToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRentalsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRentalsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToRentalsFindMany struct {
	query builder.Query
}

func (r userToRentalsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRentalsFindMany) with()         {}
func (r userToRentalsFindMany) userModel()    {}
func (r userToRentalsFindMany) userRelation() {}

func (r userToRentalsFindMany) With(params ...RentalRelationWith) userToRentalsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRentalsFindMany) Select(params ...userPrismaFields) userToRentalsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindMany) Omit(params ...userPrismaFields) userToRentalsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRentalsFindMany) OrderBy(params ...RentalOrderByParam) userToRentalsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRentalsFindMany) Skip(count int) userToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRentalsFindMany) Take(count int) userToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRentalsFindMany) Cursor(cursor UserCursorParam) userToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRentalsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRentalsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRentalsFindMany) Update(params ...UserSetParam) userToRentalsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToRentalsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRentalsUpdateMany struct {
	query builder.Query
}

func (r userToRentalsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRentalsUpdateMany) userModel() {}

func (r userToRentalsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRentalsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRentalsFindMany) Delete() userToRentalsDeleteMany {
	var v userToRentalsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToRentalsDeleteMany struct {
	query builder.Query
}

func (r userToRentalsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRentalsDeleteMany) userModel() {}

func (r userToRentalsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRentalsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Select(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Omit(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) Select(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) Omit(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) Select(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) Omit(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type bikeToRentalsFindUnique struct {
	query builder.Query
}

func (r bikeToRentalsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindUnique) with()         {}
func (r bikeToRentalsFindUnique) bikeModel()    {}
func (r bikeToRentalsFindUnique) bikeRelation() {}

func (r bikeToRentalsFindUnique) With(params ...RentalRelationWith) bikeToRentalsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeToRentalsFindUnique) Select(params ...bikePrismaFields) bikeToRentalsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindUnique) Omit(params ...bikePrismaFields) bikeToRentalsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindUnique) Exec(ctx context.Context) (
	*BikeModel,
	error,
) {
	var v *BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeToRentalsFindUnique) ExecInner(ctx context.Context) (
	*InnerBike,
	error,
) {
	var v *InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeToRentalsFindUnique) Update(params ...BikeSetParam) bikeToRentalsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Bike"

	var v bikeToRentalsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type bikeToRentalsUpdateUnique struct {
	query builder.Query
}

func (r bikeToRentalsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsUpdateUnique) bikeModel() {}

func (r bikeToRentalsUpdateUnique) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeToRentalsUpdateUnique) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r bikeToRentalsFindUnique) Delete() bikeToRentalsDeleteUnique {
	var v bikeToRentalsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Bike"

	return v
}

type bikeToRentalsDeleteUnique struct {
	query builder.Query
}

func (r bikeToRentalsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p bikeToRentalsDeleteUnique) bikeModel() {}

func (r bikeToRentalsDeleteUnique) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeToRentalsDeleteUnique) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type bikeToRentalsFindFirst struct {
	query builder.Query
}

func (r bikeToRentalsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindFirst) with()         {}
func (r bikeToRentalsFindFirst) bikeModel()    {}
func (r bikeToRentalsFindFirst) bikeRelation() {}

func (r bikeToRentalsFindFirst) With(params ...RentalRelationWith) bikeToRentalsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeToRentalsFindFirst) Select(params ...bikePrismaFields) bikeToRentalsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindFirst) Omit(params ...bikePrismaFields) bikeToRentalsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindFirst) OrderBy(params ...RentalOrderByParam) bikeToRentalsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r bikeToRentalsFindFirst) Skip(count int) bikeToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r bikeToRentalsFindFirst) Take(count int) bikeToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r bikeToRentalsFindFirst) Cursor(cursor BikeCursorParam) bikeToRentalsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r bikeToRentalsFindFirst) Exec(ctx context.Context) (
	*BikeModel,
	error,
) {
	var v *BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeToRentalsFindFirst) ExecInner(ctx context.Context) (
	*InnerBike,
	error,
) {
	var v *InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type bikeToRentalsFindMany struct {
	query builder.Query
}

func (r bikeToRentalsFindMany) getQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsFindMany) with()         {}
func (r bikeToRentalsFindMany) bikeModel()    {}
func (r bikeToRentalsFindMany) bikeRelation() {}

func (r bikeToRentalsFindMany) With(params ...RentalRelationWith) bikeToRentalsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeToRentalsFindMany) Select(params ...bikePrismaFields) bikeToRentalsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindMany) Omit(params ...bikePrismaFields) bikeToRentalsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeToRentalsFindMany) OrderBy(params ...RentalOrderByParam) bikeToRentalsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r bikeToRentalsFindMany) Skip(count int) bikeToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r bikeToRentalsFindMany) Take(count int) bikeToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r bikeToRentalsFindMany) Cursor(cursor BikeCursorParam) bikeToRentalsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r bikeToRentalsFindMany) Exec(ctx context.Context) (
	[]BikeModel,
	error,
) {
	var v []BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r bikeToRentalsFindMany) ExecInner(ctx context.Context) (
	[]InnerBike,
	error,
) {
	var v []InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r bikeToRentalsFindMany) Update(params ...BikeSetParam) bikeToRentalsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Bike"

	r.query.Outputs = countOutput

	var v bikeToRentalsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type bikeToRentalsUpdateMany struct {
	query builder.Query
}

func (r bikeToRentalsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeToRentalsUpdateMany) bikeModel() {}

func (r bikeToRentalsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeToRentalsUpdateMany) Tx() BikeManyTxResult {
	v := newBikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r bikeToRentalsFindMany) Delete() bikeToRentalsDeleteMany {
	var v bikeToRentalsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Bike"

	v.query.Outputs = countOutput

	return v
}

type bikeToRentalsDeleteMany struct {
	query builder.Query
}

func (r bikeToRentalsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p bikeToRentalsDeleteMany) bikeModel() {}

func (r bikeToRentalsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeToRentalsDeleteMany) Tx() BikeManyTxResult {
	v := newBikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type bikeFindUnique struct {
	query builder.Query
}

func (r bikeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r bikeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeFindUnique) with()         {}
func (r bikeFindUnique) bikeModel()    {}
func (r bikeFindUnique) bikeRelation() {}

func (r bikeActions) FindUnique(
	params BikeEqualsUniqueWhereParam,
) bikeFindUnique {
	var v bikeFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Bike"
	v.query.Outputs = bikeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r bikeFindUnique) With(params ...BikeRelationWith) bikeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeFindUnique) Select(params ...bikePrismaFields) bikeFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindUnique) Omit(params ...bikePrismaFields) bikeFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindUnique) Exec(ctx context.Context) (
	*BikeModel,
	error,
) {
	var v *BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeFindUnique) ExecInner(ctx context.Context) (
	*InnerBike,
	error,
) {
	var v *InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeFindUnique) Update(params ...BikeSetParam) bikeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Bike"

	var v bikeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type bikeUpdateUnique struct {
	query builder.Query
}

func (r bikeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeUpdateUnique) bikeModel() {}

func (r bikeUpdateUnique) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeUpdateUnique) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r bikeFindUnique) Delete() bikeDeleteUnique {
	var v bikeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Bike"

	return v
}

type bikeDeleteUnique struct {
	query builder.Query
}

func (r bikeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p bikeDeleteUnique) bikeModel() {}

func (r bikeDeleteUnique) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeDeleteUnique) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type bikeFindFirst struct {
	query builder.Query
}

func (r bikeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r bikeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeFindFirst) with()         {}
func (r bikeFindFirst) bikeModel()    {}
func (r bikeFindFirst) bikeRelation() {}

func (r bikeActions) FindFirst(
	params ...BikeWhereParam,
) bikeFindFirst {
	var v bikeFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Bike"
	v.query.Outputs = bikeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r bikeFindFirst) With(params ...BikeRelationWith) bikeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeFindFirst) Select(params ...bikePrismaFields) bikeFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindFirst) Omit(params ...bikePrismaFields) bikeFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindFirst) OrderBy(params ...BikeOrderByParam) bikeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r bikeFindFirst) Skip(count int) bikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r bikeFindFirst) Take(count int) bikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r bikeFindFirst) Cursor(cursor BikeCursorParam) bikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r bikeFindFirst) Exec(ctx context.Context) (
	*BikeModel,
	error,
) {
	var v *BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r bikeFindFirst) ExecInner(ctx context.Context) (
	*InnerBike,
	error,
) {
	var v *InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type bikeFindMany struct {
	query builder.Query
}

func (r bikeFindMany) getQuery() builder.Query {
	return r.query
}

func (r bikeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeFindMany) with()         {}
func (r bikeFindMany) bikeModel()    {}
func (r bikeFindMany) bikeRelation() {}

func (r bikeActions) FindMany(
	params ...BikeWhereParam,
) bikeFindMany {
	var v bikeFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Bike"
	v.query.Outputs = bikeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r bikeFindMany) With(params ...BikeRelationWith) bikeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r bikeFindMany) Select(params ...bikePrismaFields) bikeFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindMany) Omit(params ...bikePrismaFields) bikeFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range bikeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r bikeFindMany) OrderBy(params ...BikeOrderByParam) bikeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r bikeFindMany) Skip(count int) bikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r bikeFindMany) Take(count int) bikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r bikeFindMany) Cursor(cursor BikeCursorParam) bikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r bikeFindMany) Exec(ctx context.Context) (
	[]BikeModel,
	error,
) {
	var v []BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r bikeFindMany) ExecInner(ctx context.Context) (
	[]InnerBike,
	error,
) {
	var v []InnerBike
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r bikeFindMany) Update(params ...BikeSetParam) bikeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Bike"

	r.query.Outputs = countOutput

	var v bikeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type bikeUpdateMany struct {
	query builder.Query
}

func (r bikeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeUpdateMany) bikeModel() {}

func (r bikeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeUpdateMany) Tx() BikeManyTxResult {
	v := newBikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r bikeFindMany) Delete() bikeDeleteMany {
	var v bikeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Bike"

	v.query.Outputs = countOutput

	return v
}

type bikeDeleteMany struct {
	query builder.Query
}

func (r bikeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p bikeDeleteMany) bikeModel() {}

func (r bikeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeDeleteMany) Tx() BikeManyTxResult {
	v := newBikeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalToUserFindUnique struct {
	query builder.Query
}

func (r rentalToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindUnique) with()           {}
func (r rentalToUserFindUnique) rentalModel()    {}
func (r rentalToUserFindUnique) rentalRelation() {}

func (r rentalToUserFindUnique) With(params ...UserRelationWith) rentalToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToUserFindUnique) Select(params ...rentalPrismaFields) rentalToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindUnique) Omit(params ...rentalPrismaFields) rentalToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindUnique) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToUserFindUnique) Update(params ...RentalSetParam) rentalToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Rental"

	var v rentalToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalToUserUpdateUnique struct {
	query builder.Query
}

func (r rentalToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToUserUpdateUnique) rentalModel() {}

func (r rentalToUserUpdateUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToUserUpdateUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalToUserFindUnique) Delete() rentalToUserDeleteUnique {
	var v rentalToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Rental"

	return v
}

type rentalToUserDeleteUnique struct {
	query builder.Query
}

func (r rentalToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalToUserDeleteUnique) rentalModel() {}

func (r rentalToUserDeleteUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToUserDeleteUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalToUserFindFirst struct {
	query builder.Query
}

func (r rentalToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindFirst) with()           {}
func (r rentalToUserFindFirst) rentalModel()    {}
func (r rentalToUserFindFirst) rentalRelation() {}

func (r rentalToUserFindFirst) With(params ...UserRelationWith) rentalToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToUserFindFirst) Select(params ...rentalPrismaFields) rentalToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindFirst) Omit(params ...rentalPrismaFields) rentalToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindFirst) OrderBy(params ...UserOrderByParam) rentalToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalToUserFindFirst) Skip(count int) rentalToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalToUserFindFirst) Take(count int) rentalToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalToUserFindFirst) Cursor(cursor RentalCursorParam) rentalToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalToUserFindFirst) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rentalToUserFindMany struct {
	query builder.Query
}

func (r rentalToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToUserFindMany) with()           {}
func (r rentalToUserFindMany) rentalModel()    {}
func (r rentalToUserFindMany) rentalRelation() {}

func (r rentalToUserFindMany) With(params ...UserRelationWith) rentalToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToUserFindMany) Select(params ...rentalPrismaFields) rentalToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindMany) Omit(params ...rentalPrismaFields) rentalToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToUserFindMany) OrderBy(params ...UserOrderByParam) rentalToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalToUserFindMany) Skip(count int) rentalToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalToUserFindMany) Take(count int) rentalToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalToUserFindMany) Cursor(cursor RentalCursorParam) rentalToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalToUserFindMany) Exec(ctx context.Context) (
	[]RentalModel,
	error,
) {
	var v []RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerRental,
	error,
) {
	var v []InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalToUserFindMany) Update(params ...RentalSetParam) rentalToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Rental"

	r.query.Outputs = countOutput

	var v rentalToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalToUserUpdateMany struct {
	query builder.Query
}

func (r rentalToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToUserUpdateMany) rentalModel() {}

func (r rentalToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToUserUpdateMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalToUserFindMany) Delete() rentalToUserDeleteMany {
	var v rentalToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Rental"

	v.query.Outputs = countOutput

	return v
}

type rentalToUserDeleteMany struct {
	query builder.Query
}

func (r rentalToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalToUserDeleteMany) rentalModel() {}

func (r rentalToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToUserDeleteMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalToBikeFindUnique struct {
	query builder.Query
}

func (r rentalToBikeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindUnique) with()           {}
func (r rentalToBikeFindUnique) rentalModel()    {}
func (r rentalToBikeFindUnique) rentalRelation() {}

func (r rentalToBikeFindUnique) With(params ...BikeRelationWith) rentalToBikeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToBikeFindUnique) Select(params ...rentalPrismaFields) rentalToBikeFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindUnique) Omit(params ...rentalPrismaFields) rentalToBikeFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindUnique) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToBikeFindUnique) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToBikeFindUnique) Update(params ...RentalSetParam) rentalToBikeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Rental"

	var v rentalToBikeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalToBikeUpdateUnique struct {
	query builder.Query
}

func (r rentalToBikeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToBikeUpdateUnique) rentalModel() {}

func (r rentalToBikeUpdateUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToBikeUpdateUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalToBikeFindUnique) Delete() rentalToBikeDeleteUnique {
	var v rentalToBikeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Rental"

	return v
}

type rentalToBikeDeleteUnique struct {
	query builder.Query
}

func (r rentalToBikeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalToBikeDeleteUnique) rentalModel() {}

func (r rentalToBikeDeleteUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToBikeDeleteUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalToBikeFindFirst struct {
	query builder.Query
}

func (r rentalToBikeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindFirst) with()           {}
func (r rentalToBikeFindFirst) rentalModel()    {}
func (r rentalToBikeFindFirst) rentalRelation() {}

func (r rentalToBikeFindFirst) With(params ...BikeRelationWith) rentalToBikeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToBikeFindFirst) Select(params ...rentalPrismaFields) rentalToBikeFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindFirst) Omit(params ...rentalPrismaFields) rentalToBikeFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindFirst) OrderBy(params ...BikeOrderByParam) rentalToBikeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalToBikeFindFirst) Skip(count int) rentalToBikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalToBikeFindFirst) Take(count int) rentalToBikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalToBikeFindFirst) Cursor(cursor RentalCursorParam) rentalToBikeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalToBikeFindFirst) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalToBikeFindFirst) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rentalToBikeFindMany struct {
	query builder.Query
}

func (r rentalToBikeFindMany) getQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToBikeFindMany) with()           {}
func (r rentalToBikeFindMany) rentalModel()    {}
func (r rentalToBikeFindMany) rentalRelation() {}

func (r rentalToBikeFindMany) With(params ...BikeRelationWith) rentalToBikeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalToBikeFindMany) Select(params ...rentalPrismaFields) rentalToBikeFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindMany) Omit(params ...rentalPrismaFields) rentalToBikeFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalToBikeFindMany) OrderBy(params ...BikeOrderByParam) rentalToBikeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalToBikeFindMany) Skip(count int) rentalToBikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalToBikeFindMany) Take(count int) rentalToBikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalToBikeFindMany) Cursor(cursor RentalCursorParam) rentalToBikeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalToBikeFindMany) Exec(ctx context.Context) (
	[]RentalModel,
	error,
) {
	var v []RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalToBikeFindMany) ExecInner(ctx context.Context) (
	[]InnerRental,
	error,
) {
	var v []InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalToBikeFindMany) Update(params ...RentalSetParam) rentalToBikeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Rental"

	r.query.Outputs = countOutput

	var v rentalToBikeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalToBikeUpdateMany struct {
	query builder.Query
}

func (r rentalToBikeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalToBikeUpdateMany) rentalModel() {}

func (r rentalToBikeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToBikeUpdateMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalToBikeFindMany) Delete() rentalToBikeDeleteMany {
	var v rentalToBikeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Rental"

	v.query.Outputs = countOutput

	return v
}

type rentalToBikeDeleteMany struct {
	query builder.Query
}

func (r rentalToBikeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalToBikeDeleteMany) rentalModel() {}

func (r rentalToBikeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalToBikeDeleteMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalFindUnique struct {
	query builder.Query
}

func (r rentalFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rentalFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalFindUnique) with()           {}
func (r rentalFindUnique) rentalModel()    {}
func (r rentalFindUnique) rentalRelation() {}

func (r rentalActions) FindUnique(
	params RentalEqualsUniqueWhereParam,
) rentalFindUnique {
	var v rentalFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Rental"
	v.query.Outputs = rentalOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r rentalFindUnique) With(params ...RentalRelationWith) rentalFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalFindUnique) Select(params ...rentalPrismaFields) rentalFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindUnique) Omit(params ...rentalPrismaFields) rentalFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindUnique) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalFindUnique) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalFindUnique) Update(params ...RentalSetParam) rentalUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Rental"

	var v rentalUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalUpdateUnique struct {
	query builder.Query
}

func (r rentalUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalUpdateUnique) rentalModel() {}

func (r rentalUpdateUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalUpdateUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalFindUnique) Delete() rentalDeleteUnique {
	var v rentalDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Rental"

	return v
}

type rentalDeleteUnique struct {
	query builder.Query
}

func (r rentalDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalDeleteUnique) rentalModel() {}

func (r rentalDeleteUnique) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalDeleteUnique) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalFindFirst struct {
	query builder.Query
}

func (r rentalFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rentalFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalFindFirst) with()           {}
func (r rentalFindFirst) rentalModel()    {}
func (r rentalFindFirst) rentalRelation() {}

func (r rentalActions) FindFirst(
	params ...RentalWhereParam,
) rentalFindFirst {
	var v rentalFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Rental"
	v.query.Outputs = rentalOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r rentalFindFirst) With(params ...RentalRelationWith) rentalFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalFindFirst) Select(params ...rentalPrismaFields) rentalFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindFirst) Omit(params ...rentalPrismaFields) rentalFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindFirst) OrderBy(params ...RentalOrderByParam) rentalFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalFindFirst) Skip(count int) rentalFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalFindFirst) Take(count int) rentalFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalFindFirst) Cursor(cursor RentalCursorParam) rentalFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalFindFirst) Exec(ctx context.Context) (
	*RentalModel,
	error,
) {
	var v *RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rentalFindFirst) ExecInner(ctx context.Context) (
	*InnerRental,
	error,
) {
	var v *InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rentalFindMany struct {
	query builder.Query
}

func (r rentalFindMany) getQuery() builder.Query {
	return r.query
}

func (r rentalFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalFindMany) with()           {}
func (r rentalFindMany) rentalModel()    {}
func (r rentalFindMany) rentalRelation() {}

func (r rentalActions) FindMany(
	params ...RentalWhereParam,
) rentalFindMany {
	var v rentalFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Rental"
	v.query.Outputs = rentalOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r rentalFindMany) With(params ...RentalRelationWith) rentalFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rentalFindMany) Select(params ...rentalPrismaFields) rentalFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindMany) Omit(params ...rentalPrismaFields) rentalFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rentalOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rentalFindMany) OrderBy(params ...RentalOrderByParam) rentalFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rentalFindMany) Skip(count int) rentalFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rentalFindMany) Take(count int) rentalFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rentalFindMany) Cursor(cursor RentalCursorParam) rentalFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rentalFindMany) Exec(ctx context.Context) (
	[]RentalModel,
	error,
) {
	var v []RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalFindMany) ExecInner(ctx context.Context) (
	[]InnerRental,
	error,
) {
	var v []InnerRental
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rentalFindMany) Update(params ...RentalSetParam) rentalUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Rental"

	r.query.Outputs = countOutput

	var v rentalUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rentalUpdateMany struct {
	query builder.Query
}

func (r rentalUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalUpdateMany) rentalModel() {}

func (r rentalUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalUpdateMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rentalFindMany) Delete() rentalDeleteMany {
	var v rentalDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Rental"

	v.query.Outputs = countOutput

	return v
}

type rentalDeleteMany struct {
	query builder.Query
}

func (r rentalDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rentalDeleteMany) rentalModel() {}

func (r rentalDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalDeleteMany) Tx() RentalManyTxResult {
	v := newRentalManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newBikeUniqueTxResult() BikeUniqueTxResult {
	return BikeUniqueTxResult{
		result: &transaction.Result{},
	}
}

type BikeUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p BikeUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p BikeUniqueTxResult) IsTx() {}

func (r BikeUniqueTxResult) Result() (v *BikeModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newBikeManyTxResult() BikeManyTxResult {
	return BikeManyTxResult{
		result: &transaction.Result{},
	}
}

type BikeManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p BikeManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p BikeManyTxResult) IsTx() {}

func (r BikeManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRentalUniqueTxResult() RentalUniqueTxResult {
	return RentalUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RentalUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RentalUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RentalUniqueTxResult) IsTx() {}

func (r RentalUniqueTxResult) Result() (v *RentalModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRentalManyTxResult() RentalManyTxResult {
	return RentalManyTxResult{
		result: &transaction.Result{},
	}
}

type RentalManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RentalManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RentalManyTxResult) IsTx() {}

func (r RentalManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,
	_surname UserWithPrismaSurnameSetParam,
	_age UserWithPrismaAgeSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _surname.field())
	fields = append(fields, _age.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type bikeUpsertOne struct {
	query builder.Query
}

func (r bikeUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r bikeUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r bikeUpsertOne) with()         {}
func (r bikeUpsertOne) bikeModel()    {}
func (r bikeUpsertOne) bikeRelation() {}

func (r bikeActions) UpsertOne(
	params BikeEqualsUniqueWhereParam,
) bikeUpsertOne {
	var v bikeUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Bike"
	v.query.Outputs = bikeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r bikeUpsertOne) Create(

	_model BikeWithPrismaModelSetParam,

	optional ...BikeSetParam,
) bikeUpsertOne {
	var v bikeUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _model.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r bikeUpsertOne) Update(
	params ...BikeSetParam,
) bikeUpsertOne {
	var v bikeUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r bikeUpsertOne) Exec(ctx context.Context) (*BikeModel, error) {
	var v BikeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r bikeUpsertOne) Tx() BikeUniqueTxResult {
	v := newBikeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rentalUpsertOne struct {
	query builder.Query
}

func (r rentalUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r rentalUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r rentalUpsertOne) with()           {}
func (r rentalUpsertOne) rentalModel()    {}
func (r rentalUpsertOne) rentalRelation() {}

func (r rentalActions) UpsertOne(
	params RentalEqualsUniqueWhereParam,
) rentalUpsertOne {
	var v rentalUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Rental"
	v.query.Outputs = rentalOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r rentalUpsertOne) Create(

	_user RentalWithPrismaUserSetParam,
	_bike RentalWithPrismaBikeSetParam,

	optional ...RentalSetParam,
) rentalUpsertOne {
	var v rentalUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _user.field())
	fields = append(fields, _bike.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r rentalUpsertOne) Update(
	params ...RentalSetParam,
) rentalUpsertOne {
	var v rentalUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r rentalUpsertOne) Exec(ctx context.Context) (*RentalModel, error) {
	var v RentalModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rentalUpsertOne) Tx() RentalUniqueTxResult {
	v := newRentalUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
